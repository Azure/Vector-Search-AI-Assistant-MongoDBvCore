{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.24.24.22086",
      "templateHash": "14273225779941310528"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "eastus",
      "allowedValues": [
        "australiaeast",
        "canadaeast",
        "westeurope",
        "francecentral",
        "japaneast",
        "swedencentral",
        "switzerlandnorth",
        "uksouth",
        "eastus",
        "eastus2",
        "northcentralus",
        "southcentralus"
      ],
      "metadata": {
        "description": "Location where all resources will be deployed. This value defaults to the **East US** region."
      }
    },
    "name": {
      "type": "string",
      "defaultValue": "[uniqueString(resourceGroup().id)]",
      "maxLength": 15,
      "metadata": {
        "description": "Unique name for the deployed services below. Max length 15 characters, alphanumeric only:\r\n- Azure Cosmos DB for MongoDB vCore\r\n- Azure App Service\r\n- Azure Functions\r\n\r\nThe name defaults to a unique string generated from the resource group identifier.\r\n"
      }
    },
    "appServiceSku": {
      "type": "string",
      "defaultValue": "B1",
      "allowedValues": [
        "B1",
        "S1"
      ],
      "metadata": {
        "description": "Specifies the SKU for the Azure App Service plan. Defaults to **B1**"
      }
    },
    "openAiSku": {
      "type": "string",
      "defaultValue": "S0",
      "allowedValues": [
        "S0"
      ],
      "metadata": {
        "description": "Specifies the SKU for the Azure OpenAI resource. Defaults to **S0**"
      }
    },
    "mongoDbUserName": {
      "type": "string",
      "metadata": {
        "description": "MongoDB vCore user Name. No dashes."
      }
    },
    "mongoDbPassword": {
      "type": "securestring",
      "minLength": 8,
      "maxLength": 256,
      "metadata": {
        "description": "MongoDB vCore password. 8-256 characters, 3 of the following: lower case, upper case, numeric, symbol."
      }
    },
    "openAiAccountName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies the Azure OpenAI account name."
      }
    },
    "openAiAccountKey": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies the key for Azure OpenAI account."
      }
    },
    "openAiCompletionsModelDeploymentName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies the DEPLOYMENT NAME for the GPT model in your Azure OpenAI account."
      }
    },
    "openAiEmbeddingsDeploymentName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies the DEPLOYMENT NAME for the embbeddings model in you Azure OpenAI account."
      }
    },
    "appGitRepository": {
      "type": "string",
      "defaultValue": "https://github.com/Azure/Vector-Search-AI-Assistant-MongoDBvCore.git",
      "metadata": {
        "description": "Git repository URL for the application source. This defaults to the [`Azure/Vector-Search-Ai-Assistant`](https://github.com/Azure/Vector-Search-AI-Assistant-MongoDBvCore.git) repository."
      }
    },
    "appGetRepositoryBranch": {
      "type": "string",
      "defaultValue": "main",
      "metadata": {
        "description": "Git repository branch for the application source. This defaults to the [**main** branch of the `Azure/Vector-Search-Ai-Assistant-MongoDBvCore`](https://github.com/Azure/Vector-Search-AI-Assistant-MongoDBvCore/tree/main) repository."
      }
    }
  },
  "variables": {
    "openAiSettings": {
      "accountName": "[parameters('openAiAccountName')]",
      "accountKey": "[parameters('openAiAccountKey')]",
      "endPoint": "[format('https://{0}.openai.azure.com/', parameters('openAiAccountName'))]",
      "sku": "[parameters('openAiSku')]",
      "maxConversationTokens": "100",
      "maxCompletionTokens": "500",
      "completionsModel": {
        "deployment": {
          "name": "[parameters('openAiCompletionsModelDeploymentName')]"
        }
      },
      "embeddingsModel": {
        "deployment": {
          "name": "[parameters('openAiEmbeddingsDeploymentName')]"
        }
      }
    },
    "mongovCoreSettings": {
      "mongoClusterName": "[format('{0}-mongo', parameters('name'))]",
      "mongoClusterLogin": "[parameters('mongoDbUserName')]",
      "mongoClusterPassword": "[parameters('mongoDbPassword')]"
    },
    "appServiceSettings": {
      "plan": {
        "name": "[format('{0}-web-plan', parameters('name'))]",
        "sku": "[parameters('appServiceSku')]"
      },
      "web": {
        "name": "[format('{0}-web', parameters('name'))]",
        "git": {
          "repo": "[parameters('appGitRepository')]",
          "branch": "[parameters('appGetRepositoryBranch')]"
        }
      },
      "function": {
        "name": "[format('{0}-function', parameters('name'))]",
        "git": {
          "repo": "[parameters('appGitRepository')]",
          "branch": "[parameters('appGetRepositoryBranch')]"
        }
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.DocumentDB/mongoClusters",
      "apiVersion": "2023-09-15-preview",
      "name": "[variables('mongovCoreSettings').mongoClusterName]",
      "location": "[parameters('location')]",
      "properties": {
        "administratorLogin": "[variables('mongovCoreSettings').mongoClusterLogin]",
        "administratorLoginPassword": "[variables('mongovCoreSettings').mongoClusterPassword]",
        "serverVersion": "5.0",
        "nodeGroupSpecs": [
          {
            "kind": "Shard",
            "sku": "M30",
            "diskSizeGB": 128,
            "enableHa": false,
            "nodeCount": 1
          }
        ]
      }
    },
    {
      "type": "Microsoft.DocumentDB/mongoClusters/firewallRules",
      "apiVersion": "2023-09-15-preview",
      "name": "[format('{0}/{1}', variables('mongovCoreSettings').mongoClusterName, 'allowAzure')]",
      "properties": {
        "startIpAddress": "0.0.0.0",
        "endIpAddress": "0.0.0.0"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/mongoClusters', variables('mongovCoreSettings').mongoClusterName)]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/mongoClusters/firewallRules",
      "apiVersion": "2023-09-15-preview",
      "name": "[format('{0}/{1}', variables('mongovCoreSettings').mongoClusterName, 'allowAll')]",
      "properties": {
        "startIpAddress": "0.0.0.0",
        "endIpAddress": "255.255.255.255"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/mongoClusters', variables('mongovCoreSettings').mongoClusterName)]"
      ]
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2022-03-01",
      "name": "[variables('appServiceSettings').plan.name]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[variables('appServiceSettings').plan.sku]"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-03-01",
      "name": "[variables('appServiceSettings').web.name]",
      "location": "[parameters('location')]",
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServiceSettings').plan.name)]",
        "httpsOnly": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServiceSettings').plan.name)]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-09-01",
      "name": "[format('{0}fnstorage', parameters('name'))]",
      "location": "[parameters('location')]",
      "kind": "Storage",
      "sku": {
        "name": "Standard_LRS"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-03-01",
      "name": "[variables('appServiceSettings').function.name]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServiceSettings').plan.name)]",
        "httpsOnly": true,
        "siteConfig": {
          "alwaysOn": true
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServiceSettings').plan.name)]",
        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}fnstorage', parameters('name')))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2022-03-01",
      "name": "[format('{0}/{1}', variables('appServiceSettings').web.name, 'appsettings')]",
      "kind": "string",
      "properties": {
        "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('Microsoft.Insights/components', variables('appServiceSettings').web.name), '2020-02-02').InstrumentationKey]",
        "OPENAI__ENDPOINT": "[variables('openAiSettings').endPoint]",
        "OPENAI__KEY": "[variables('openAiSettings').accountKey]",
        "OPENAI__EMBEDDINGSDEPLOYMENT": "[variables('openAiSettings').embeddingsModel.deployment.name]",
        "OPENAI__COMPLETIONSDEPLOYMENT": "[variables('openAiSettings').completionsModel.deployment.name]",
        "OPENAI__MAXCONVERSATIONTOKENS": "[variables('openAiSettings').maxConversationTokens]",
        "OPENAI__MAXCOMPLETIONTOKENS": "[variables('openAiSettings').maxCompletionTokens]",
        "MONGODB__CONNECTION": "[format('mongodb+srv://{0}:{1}@{2}.mongocluster.cosmos.azure.com/?tls=true&authMechanism=SCRAM-SHA-256&retrywrites=false&maxIdleTimeMS=120000', variables('mongovCoreSettings').mongoClusterLogin, variables('mongovCoreSettings').mongoClusterPassword, variables('mongovCoreSettings').mongoClusterName)]",
        "MONGODB__DATABASENAME": "retaildb",
        "MONGODB__COLLECTIONNAMES": "product",
        "MONGODB__MAXVECTORSEARCHRESULTS": "10",
        "MONGODB__VECTORINDEXTYPE": "ivf"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('appServiceSettings').web.name)]",
        "[resourceId('Microsoft.Insights/components', variables('appServiceSettings').web.name)]"
      ]
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2022-03-01",
      "name": "[format('{0}/{1}', variables('appServiceSettings').function.name, 'appsettings')]",
      "kind": "string",
      "properties": {
        "AzureWebJobsStorage": "[format('DefaultEndpointsProtocol=https;AccountName={0}fnstorage;EndpointSuffix=core.windows.net;AccountKey={1}', parameters('name'), listKeys(resourceId('Microsoft.Storage/storageAccounts', format('{0}fnstorage', parameters('name'))), '2021-09-01').keys[0].value)]",
        "APPLICATIONINSIGHTS_CONNECTION_STRING": "[reference(resourceId('Microsoft.Insights/components', variables('appServiceSettings').function.name), '2020-02-02').ConnectionString]",
        "FUNCTIONS_EXTENSION_VERSION": "~4",
        "FUNCTIONS_WORKER_RUNTIME": "dotnet-isolated",
        "OPENAI__ENDPOINT": "[variables('openAiSettings').endPoint]",
        "OPENAI__KEY": "[variables('openAiSettings').accountKey]",
        "OPENAI__EMBEDDINGSDEPLOYMENT": "[variables('openAiSettings').embeddingsModel.deployment.name]",
        "OPENAI__MAXTOKENS": "8191",
        "MONGODB__CONNECTION": "[format('mongodb+srv://{0}:{1}@{2}.mongocluster.cosmos.azure.com/?tls=true&authMechanism=SCRAM-SHA-256&retrywrites=false&maxIdleTimeMS=120000', variables('mongovCoreSettings').mongoClusterLogin, variables('mongovCoreSettings').mongoClusterPassword, variables('mongovCoreSettings').mongoClusterName)]",
        "MONGODB__DATABASENAME": "retaildb",
        "MONGODB__COLLECTIONNAMES": "product,customer,vectors,completions",
        "MONGODB__MAXVECTORSEARCHRESULTS": "10",
        "MONGODB__VECTORINDEXTYPE": "ivf"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('appServiceSettings').function.name)]",
        "[resourceId('Microsoft.Insights/components', variables('appServiceSettings').function.name)]",
        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}fnstorage', parameters('name')))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites/sourcecontrols",
      "apiVersion": "2021-03-01",
      "name": "[format('{0}/{1}', variables('appServiceSettings').web.name, 'web')]",
      "properties": {
        "repoUrl": "[variables('appServiceSettings').web.git.repo]",
        "branch": "[variables('appServiceSettings').web.git.branch]",
        "isManualIntegration": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('appServiceSettings').web.name)]",
        "[resourceId('Microsoft.Web/sites/config', variables('appServiceSettings').web.name, 'appsettings')]"
      ]
    },
    {
      "type": "Microsoft.Web/sites/sourcecontrols",
      "apiVersion": "2021-03-01",
      "name": "[format('{0}/{1}', variables('appServiceSettings').function.name, 'web')]",
      "properties": {
        "repoUrl": "[variables('appServiceSettings').web.git.repo]",
        "branch": "[variables('appServiceSettings').web.git.branch]",
        "isManualIntegration": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('appServiceSettings').function.name)]",
        "[resourceId('Microsoft.Web/sites/config', variables('appServiceSettings').function.name, 'appsettings')]"
      ]
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('appServiceSettings').function.name]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('appServiceSettings').function.name)]"
      ]
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('appServiceSettings').web.name]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('appServiceSettings').web.name)]"
      ]
    }
  ],
  "outputs": {
    "deployedUrl": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Web/sites', variables('appServiceSettings').web.name), '2022-03-01').defaultHostName]"
    }
  }
}